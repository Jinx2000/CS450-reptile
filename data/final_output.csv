"document_id","title","content","usage_example","category","tags","reference"
"1","Design principles","The following principles shaped the design and architecture of Gateway API: Role-oriented: Gateway API kinds are modeled after organizational roles that are responsible for managing Kubernetes service networking: Infrastructure Provider: Manages infrastructure that allows multiple isolated clusters to serve multiple tenants, e.g.
a cloud provider.
Cluster Operator: Manages clusters and is typically concerned with policies, network access, application permissions, etc.
Application Developer: Manages an application running in a cluster and is typically concerned with application-level configuration and Service composition.
Portable: Gateway API specifications are defined as custom resources and are supported by many implementations.
Expressive: Gateway API kinds support functionality for common traffic routing use cases such as header-based matching, traffic weighting, and others that were only possible in Ingress by using custom annotations.
Extensible: Gateway allows for custom resources to be linked at various layers of the API.
This makes granular customization possible at the appropriate places within the API structure.","None","Kubernetes_gateway","None","None"
"2","Resource model","In this example, a controller that has implemented Gateway API is configured to manage GatewayClasses with the controller name example.com/gateway-controller.
Gateways of this class will be managed by the implementation's controller.
See the GatewayClass reference for a full definition of this API kind.
Gateway A Gateway describes an instance of traffic handling infrastructure.
It defines a network endpoint that can be used for processing traffic, i.e.
filtering, balancing, splitting, etc.
for backends such as a Service.
For example, a Gateway may represent a cloud load balancer or an in-cluster proxy server that is configured to accept HTTP traffic.
A minimal Gateway resource example:","apiVersion: gateway.networking.k8s.io/v1
kind: GatewayClass
metadata:
  name: example-class
spec:
  controllerName: example.com/gateway-controller","Kubernetes_gateway","None","None"
"3","Resource model","In this example, an instance of traffic handling infrastructure is programmed to listen for HTTP traffic on port 80.
Since the addresses field is unspecified, an address or hostname is assigned to the Gateway by the implementation's controller.
This address is used as a network endpoint for processing traffic of backend network endpoints defined in routes.
See the Gateway reference for a full definition of this API kind.
HTTPRoute The HTTPRoute kind specifies routing behavior of HTTP requests from a Gateway listener to backend network endpoints.
For a Service backend, an implementation may represent the backend network endpoint as a Service IP or the backing Endpoints of the Service.
An HTTPRoute represents configuration that is applied to the underlying Gateway implementation.
For example, defining a new HTTPRoute may result in configuring additional traffic routes in a cloud load balancer or in-cluster proxy server.
A minimal HTTPRoute example:","apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: example-gateway
spec:
  gatewayClassName: example-class
  listeners:
  - name: http
    protocol: HTTP
    port: 80","Kubernetes_gateway","None","None"
"4","Resource model","In this example, HTTP traffic from Gateway example-gateway with the Host: header set to www.example.com and the request path specified as /login will be routed to Service example-svc on port 8080.
See the HTTPRoute reference for a full definition of this API kind.","apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: example-httproute
spec:
  parentRefs:
  - name: example-gateway
  hostnames:
  - ""www.example.com""
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /login
    backendRefs:
    - name: example-svc
      port: 8080
","Kubernetes_gateway","None","None"
"5","Request flow","Here is a simple example of HTTP traffic being routed to a Service by using a Gateway and an HTTPRoute: In this example, the request flow for a Gateway implemented as a reverse proxy is: The client starts to prepare an HTTP request for the URL http://www.example.com The client's DNS resolver queries for the destination name and learns a mapping to one or more IP addresses associated with the Gateway.
The client sends a request to the Gateway IP address; the reverse proxy receives the HTTP request and uses the Host: header to match a configuration that was derived from the Gateway and attached HTTPRoute.
Optionally, the reverse proxy can perform request header and/or path matching based on match rules of the HTTPRoute.
Optionally, the reverse proxy can modify the request; for example, to add or remove headers, based on filter rules of the HTTPRoute.
Lastly, the reverse proxy forwards the request to one or more backends.","None","Kubernetes_gateway","None","None"
"6","Conformance","Gateway API covers a broad set of features and is widely implemented.
This combination requires clear conformance definitions and tests to ensure that the API provides a consistent experience wherever it is used.
See the conformance documentation to understand details such as release channels, support levels, and running conformance tests.","None","Kubernetes_gateway","None","None"
"7","Migrating from Ingress","Gateway API is the successor to the Ingress API.
However, it does not include the Ingress kind.
As a result, a one-time conversion from your existing Ingress resources to Gateway API resources is necessary.
Refer to the ingress migration guide for details on migrating Ingress resources to Gateway API resources.","None","Kubernetes_gateway","None","None"
"8","What's next","Instead of Gateway API resources being natively implemented by Kubernetes, the specifications are defined as Custom Resources supported by a wide range of implementations.
Install the Gateway API CRDs or follow the installation instructions of your selected implementation.
After installing an implementation, use the Getting Started guide to help you quickly start working with Gateway API.
Note: Make sure to review the documentation of your selected implementation to understand any caveats.
Refer to the API specification for additional details of all Gateway API kinds.","None","Kubernetes_gateway","None","None"
